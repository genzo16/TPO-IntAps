import java.util.Properties;
import java.util.logging.Logger;

import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSConsumer;
import javax.jms.JMSContext;
import javax.naming.Context;
import javax.naming.InitialContext;

public class TestQueue {
	private static final Logger log = Logger.getLogger(TestQueue.class.getName());

	// Set up all the default values
	private static final String DEFAULT_MESSAGE = "{\"idGrupo\": 2,\"fecha\":\"2016-11-07T08:12:16+01:00\",\"mensaje\":\"Holis\"}";
	private static final String DEFAULT_CONNECTION_FACTORY = "jms/RemoteConnectionFactory";
	private static final String DEFAULT_DESTINATION = "jms/queue/q_logs";
	private static final String DEFAULT_MESSAGE_COUNT = "1";
	private static final String DEFAULT_USERNAME = "guest";
	private static final String DEFAULT_PASSWORD = "guest";
	private static final String INITIAL_CONTEXT_FACTORY = "org.jboss.naming.remote.client.InitialContextFactory";
	private static final String PROVIDER_URL = "http-remoting://192.168.1.130:8081";

	public static void main(String[] args) throws Exception {

		Context namingContext = null;
		JMSContext context = null;

		try {
			String userName = System.getProperty("username", DEFAULT_USERNAME);
			String password = System.getProperty("password", DEFAULT_PASSWORD);

			// Set up the namingContext for the JNDI lookup
			final Properties env = new Properties();
			env.put(Context.INITIAL_CONTEXT_FACTORY, INITIAL_CONTEXT_FACTORY);
			env.put(Context.PROVIDER_URL, System.getProperty(Context.PROVIDER_URL, PROVIDER_URL));
			env.put(Context.SECURITY_PRINCIPAL, userName);
			env.put(Context.SECURITY_CREDENTIALS, password);
			namingContext = new InitialContext(env);

			// Perform the JNDI lookups
			String connectionFactoryString = System.getProperty("connection.factory", DEFAULT_CONNECTION_FACTORY);
			log.info("Attempting to acquire connection factory \"" + connectionFactoryString + "\"");
			ConnectionFactory connectionFactory = (ConnectionFactory) namingContext.lookup(connectionFactoryString);
			log.info("Found connection factory \"" + connectionFactoryString + "\" in JNDI");

			String destinationString = System.getProperty("destination", DEFAULT_DESTINATION);
			log.info("Attempting to acquire destination \"" + destinationString + "\"");
			Destination destination = (Destination) namingContext.lookup(destinationString);
			log.info("Found destination \"" + destinationString + "\" in JNDI");

			// Create the JMS context
			context = connectionFactory.createContext(DEFAULT_USERNAME,DEFAULT_PASSWORD);

			int count = Integer.parseInt(System.getProperty("message.count", DEFAULT_MESSAGE_COUNT));
			String content = System.getProperty("message.content", DEFAULT_MESSAGE);

			log.info("Sending " + count + " messages with content: " + content);

			// Send the specified number of messages
			for (int i = 0; i < count; i++) {
				context.createProducer().send(destination, content);
			}

			// Create the JMS consumer
			JMSConsumer consumer = context.createConsumer(destination);
			// Then receive the same number of messages that were sent
			for (int i = 0; i < count; i++) {
				String text = consumer.receiveBody(String.class, 5000);
				log.info("Received message with content " + text);
			}
		} catch (Exception e) {
			log.severe(e.getMessage());
			throw e;
		} finally {
			if (namingContext != null) {
				namingContext.close();
			}

			// closing the context takes care of consumer too
			if (context != null) {
				context.close();
			}
		}
	}

}
