package de.unimuenster.pi.library.ejb;

import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.ejb.EJBException;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.jws.WebMethod;
import javax.jws.WebService;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.validation.ConstraintViolationException;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.apache.commons.io.IOUtils;


import de.unimuenster.pi.library.jpa.Agencia;
import dtos.AgenciaDTO;
import dtos.SolicitudDTO;
import enums.EstadoAgencia;

@Stateless
@LocalBean
@Path("agencias")
@WebService(name = "AgenciaWebService", serviceName = "AgenciaService", portName = "AgenciaServicePort")
public class AgenciaServiceBean implements AgenciaService {
	
	@PersistenceContext
	private EntityManager manager;

	@Override
	public Agencia crearAgencia(@PathParam("nombre") String nombre, @PathParam("direccion") String direccion) {
		Agencia agencia = buscarAgencia(nombre);
		if (agencia == null) {
			try {
				agencia = new Agencia(nombre, direccion);
				String idAgencia = "";
				if(obtenerIDAgencia() < 10)
					idAgencia = "G07_0000000" + obtenerIDAgencia();
				else
					idAgencia = "G07_000000" + obtenerIDAgencia();
				agencia.setIdAgencia(idAgencia);
				agencia.setIdSolicitud(idAgencia);
				manager.persist(agencia);
				//sendPostToBackOffice(agencia.toDTO());
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return agencia;
	}
	public int obtenerIDAgencia(){
		int maxID = manager.createQuery("SELECT MAX(interID) FROM Agencia", Integer.class)
		.getSingleResult();
		if (maxID > 0)
			return maxID;
		else
			return	1;
		
	}
	
	public int obtenerIDSolicitud(){
		int maxID = manager.createQuery("SELECT MAX(interID) FROM Agencia", Integer.class)
		.getSingleResult();
		if (maxID > 0)
			return maxID;
		else
			return	1;
		
	}
	/*@POST
	@Path("/{nombre}/{direccion}")
	public Agencia crearAgencia(Agencia agencia) throws Exception {
		if (manager.createQuery("SELECT COUNT(*) FROM Agencia WHERE nombre=:nombre", Long.class).setParameter("nombre", agencia.getNombre())
				.getSingleResult() > 0)
			throw new EJBException(new ConstraintViolationException(
					"La Agencia ya existe", null));
		
		//sendPostToBackOffice(agencia.toDTO());
		manager.persist(agencia);
		return agencia;
	}*/
	
	@Override
	@WebMethod(exclude = true)
	public Agencia crearAgencia(Agencia agencia) throws Exception {
		String idAgencia = "";
		if(obtenerIDAgencia() < 10)
			idAgencia = "G07_0000000" + obtenerIDAgencia();
		else
			idAgencia = "G07_000000" + obtenerIDAgencia();
		agencia.setIdAgencia(idAgencia);
		agencia.setIdSolicitud(idAgencia);
		agencia.setFecha(Calendar.getInstance().getTime());
		agencia.setEstado(EstadoAgencia.PENDIENTE_DE_ACTIVACION);
		manager.persist(agencia);
		sendPostToBackOffice(agencia.toDTO());
		return agencia;
	}
	
	private void sendPostToBackOffice(AgenciaDTO agencia) {
		try{
		URL url = new URL("http://192.168.0.101:8080/BackOfficeJAXRS/rest/ofertaPaquete/solicitudAgencia"); //Cambiar URL
		agencia.setUrl(url.toString());
		HttpURLConnection urlConnection = (HttpURLConnection)
		url.openConnection();
		urlConnection.setDoOutput(true);
		urlConnection.setRequestMethod("POST");
		urlConnection.setRequestProperty("Content-Type", "text/plain");
		System.out.println("JSONaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa: "+ agencia.getJsonString());

		IOUtils.write(agencia.getJsonString(), urlConnection.getOutputStream());
		if(urlConnection.getResponseCode() != 200)
			throw new RuntimeException("Error de conexion"+ urlConnection.getResponseCode());
		
		String response = IOUtils.toString(urlConnection.getInputStream());
		System.out.println("Respuesta POST: "+ response);
		}catch(Exception e){
			
		}
	}

	private Agencia buscarAgencia(String nombre) {
		Agencia agencia = null;
		try {
			agencia = (Agencia) manager.createQuery("FROM Agencia WHERE nombre = :nombre")
					.setParameter("nombre", nombre).getSingleResult();
		} catch (NoResultException e) {

		}
		return agencia;
	}

	@POST
	@Path("/validacionAgencia")
	@Consumes("application/json")
	public Response validacionAgencia(SolicitudDTO solicitud) {
		Agencia agencia = (Agencia) manager.createQuery("FROM Agencia WHERE ID_Solicitud = :ID_Solicitud")
				.setParameter("ID_Solicitud", solicitud.getID_Solcitud()).getSingleResult();
		agencia.setEstado(EstadoAgencia.ACTIVA);
		manager.merge(agencia);
		return Response.status(Response.Status.OK).entity("Mensjae Recibido").build();
	}
	
	@SuppressWarnings("unchecked")
	@GET
	@Path("/All")
	@Produces(MediaType.APPLICATION_JSON)
	public List<AgenciaDTO> allAgencias() {
		List<Agencia> agencias = new ArrayList<>();
		List<AgenciaDTO> agenciasDto = new ArrayList<>();
		try {
			agencias = (List<Agencia>) manager.createQuery("from Agencia").getResultList();
			for (Agencia a : agencias) {
				agenciasDto.add(a.toDTO());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return agenciasDto;
	}
	@Override
	public Agencia getAgencia(int agenciaID) {
		Agencia agencia = manager.find(Agencia.class, agenciaID);
		if (agencia == null)
			throw new IllegalArgumentException(String.format(
					"Agencia con ID %s no encontrada", agenciaID));
		return agencia;
	}
	
}
